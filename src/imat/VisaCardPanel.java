/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VisaCardPanel.java
 *
 * Created on 2012-feb-28, 20:21:44
 */
package imat;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.NumberFormat;
import javax.swing.JFormattedTextField.AbstractFormatterFactory;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import se.chalmers.ait.dat215.project.CreditCard;
import se.chalmers.ait.dat215.project.IMatDataHandler;

/**
 *
 * @author lisastenberg
 */
public class VisaCardPanel extends javax.swing.JPanel implements DocumentListener{
    IMatDataHandler dh = IMatDataHandler.getInstance();
    CreditCard creditCard;
    /** Creates new form VisaCardPanel */
    public VisaCardPanel() {
        initComponents();
        cardNumberTextField1.getDocument().addDocumentListener(this);
        cardNumberTextField2.getDocument().addDocumentListener(this);
        cardNumberTextField3.getDocument().addDocumentListener(this);
        cardNumberTextField4.getDocument().addDocumentListener(this);
        verificationTextField.getDocument().addDocumentListener(this);
        
        creditCard = dh.getCreditCard();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        cardNumberLabel = new javax.swing.JLabel();
        validLabel = new javax.swing.JLabel();
        vertificationLabel = new javax.swing.JLabel();
        holdersLabel = new javax.swing.JLabel();
        verificationTextField = new javax.swing.JTextField(new PromptDocument(3),"",3);
        holdersTextField = new javax.swing.JTextField();
        validMonthCombo = new javax.swing.JComboBox();
        validYearCombo = new javax.swing.JComboBox();
        cardNumberTextField1 = new javax.swing.JTextField(new PromptDocument(4),"",4);
        cardNumberTextField2 = new javax.swing.JTextField(new PromptDocument(4),"",4);
        cardNumberTextField3 = new javax.swing.JTextField(new PromptDocument(4),"",4);
        cardNumberTextField4 = new javax.swing.JTextField(new PromptDocument(4),"",4);
        cardTypeLabel = new javax.swing.JLabel();
        cardTypeComboBox = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        errorArea = new javax.swing.JTextArea();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(imat.IMatApp.class).getContext().getResourceMap(VisaCardPanel.class);
        jFormattedTextField1.setText(resourceMap.getString("jFormattedTextField1.text")); // NOI18N
        jFormattedTextField1.setName("jFormattedTextField1"); // NOI18N

        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(431, 338));

        cardNumberLabel.setFont(resourceMap.getFont("holdersLabel.font")); // NOI18N
        cardNumberLabel.setText(resourceMap.getString("cardNumberLabel.text")); // NOI18N
        cardNumberLabel.setName("cardNumberLabel"); // NOI18N

        validLabel.setFont(resourceMap.getFont("holdersLabel.font")); // NOI18N
        validLabel.setText(resourceMap.getString("validLabel.text")); // NOI18N
        validLabel.setName("validLabel"); // NOI18N

        vertificationLabel.setFont(resourceMap.getFont("holdersLabel.font")); // NOI18N
        vertificationLabel.setText(resourceMap.getString("vertificationLabel.text")); // NOI18N
        vertificationLabel.setName("vertificationLabel"); // NOI18N

        holdersLabel.setFont(resourceMap.getFont("holdersLabel.font")); // NOI18N
        holdersLabel.setText(resourceMap.getString("holdersLabel.text")); // NOI18N
        holdersLabel.setName("holdersLabel"); // NOI18N

        verificationTextField.setFont(resourceMap.getFont("cardNumberTextField2.font")); // NOI18N
        verificationTextField.setText(resourceMap.getString("verificationTextField.text")); // NOI18N
        verificationTextField.setName("verificationTextField"); // NOI18N

        holdersTextField.setFont(resourceMap.getFont("cardNumberTextField2.font")); // NOI18N
        holdersTextField.setText(resourceMap.getString("holdersTextField.text")); // NOI18N
        holdersTextField.setName("holdersTextField"); // NOI18N

        validMonthCombo.setFont(resourceMap.getFont("cardNumberTextField2.font")); // NOI18N
        validMonthCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "mm", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        validMonthCombo.setToolTipText(resourceMap.getString("validMonthCombo.toolTipText")); // NOI18N
        validMonthCombo.setName("validMonthCombo"); // NOI18N
        validMonthCombo.setSize(new java.awt.Dimension(100, 27));

        validYearCombo.setFont(resourceMap.getFont("cardNumberTextField2.font")); // NOI18N
        validYearCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "åå", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        validYearCombo.setToolTipText(resourceMap.getString("validYearCombo.toolTipText")); // NOI18N
        validYearCombo.setName("validYearCombo"); // NOI18N
        validYearCombo.setSize(new java.awt.Dimension(100, 27));

        cardNumberTextField1.setColumns(4);
        cardNumberTextField1.setFont(resourceMap.getFont("cardNumberTextField2.font")); // NOI18N
        cardNumberTextField1.setText(resourceMap.getString("cardNumberTextField1.text")); // NOI18N
        cardNumberTextField1.setMinimumSize(new java.awt.Dimension(100, 28));
        cardNumberTextField1.setName("cardNumberTextField1"); // NOI18N
        cardNumberTextField1.setSize(new java.awt.Dimension(100, 28));

        cardNumberTextField2.setColumns(50);
        cardNumberTextField2.setFont(resourceMap.getFont("cardNumberTextField2.font")); // NOI18N
        cardNumberTextField2.setText(resourceMap.getString("cardNumberTextField2.text")); // NOI18N
        cardNumberTextField2.setName("cardNumberTextField2"); // NOI18N
        cardNumberTextField2.setSize(new java.awt.Dimension(100, 28));

        cardNumberTextField3.setFont(resourceMap.getFont("cardNumberTextField2.font")); // NOI18N
        cardNumberTextField3.setText(resourceMap.getString("cardNumberTextField3.text")); // NOI18N
        cardNumberTextField3.setName("cardNumberTextField3"); // NOI18N
        cardNumberTextField3.setSize(new java.awt.Dimension(100, 28));

        cardNumberTextField4.setFont(resourceMap.getFont("cardNumberTextField2.font")); // NOI18N
        cardNumberTextField4.setText(resourceMap.getString("cardNumberTextField4.text")); // NOI18N
        cardNumberTextField4.setName("cardNumberTextField4"); // NOI18N
        cardNumberTextField4.setSize(new java.awt.Dimension(100, 28));

        cardTypeLabel.setFont(resourceMap.getFont("holdersLabel.font")); // NOI18N
        cardTypeLabel.setText(resourceMap.getString("cardTypeLabel.text")); // NOI18N
        cardTypeLabel.setName("cardTypeLabel"); // NOI18N

        cardTypeComboBox.setFont(resourceMap.getFont("cardNumberTextField2.font")); // NOI18N
        cardTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Visa", "Mastercard" }));
        cardTypeComboBox.setName("cardTypeComboBox"); // NOI18N

        jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        jScrollPane1.setBackground(resourceMap.getColor("jScrollPane1.background")); // NOI18N
        jScrollPane1.setBorder(null);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        errorArea.setBackground(resourceMap.getColor("errorArea.background")); // NOI18N
        errorArea.setColumns(20);
        errorArea.setFont(resourceMap.getFont("errorArea.font")); // NOI18N
        errorArea.setForeground(resourceMap.getColor("errorArea.foreground")); // NOI18N
        errorArea.setRows(5);
        errorArea.setName("errorArea"); // NOI18N
        jScrollPane1.setViewportView(errorArea);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 302, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(40, 40, 40)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(vertificationLabel)
                    .add(cardTypeLabel)
                    .add(holdersLabel)
                    .add(validLabel)
                    .add(cardNumberLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(validMonthCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(validYearCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(verificationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(layout.createSequentialGroup()
                                        .add(cardNumberTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(cardNumberTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, cardTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(cardNumberTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, holdersTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 194, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(cardNumberTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cardTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cardTypeLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cardNumberTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cardNumberTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cardNumberTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cardNumberLabel)
                    .add(cardNumberTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(validMonthCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(validYearCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(validLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(verificationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(vertificationLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(holdersTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(holdersLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 15, Short.MAX_VALUE)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cardNumberLabel;
    private javax.swing.JTextField cardNumberTextField1;
    private javax.swing.JTextField cardNumberTextField2;
    private javax.swing.JTextField cardNumberTextField3;
    private javax.swing.JTextField cardNumberTextField4;
    private javax.swing.JComboBox cardTypeComboBox;
    private javax.swing.JLabel cardTypeLabel;
    private javax.swing.JTextArea errorArea;
    private javax.swing.JLabel holdersLabel;
    private javax.swing.JTextField holdersTextField;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel validLabel;
    private javax.swing.JComboBox validMonthCombo;
    private javax.swing.JComboBox validYearCombo;
    private javax.swing.JTextField verificationTextField;
    private javax.swing.JLabel vertificationLabel;
    // End of variables declaration//GEN-END:variables

 
    
    private String toNumbers(String s,int size){
        char[] c = s.toCharArray();
        String temp ="";
        for(int i=0;i<c.length;i++){
            if(Character.isDigit(c[i])){
                temp += c[i];
            }
        }
        return temp;
    }
    
    //returns true if everything was set okay. otherwise not
    public boolean setInfo() {
        clearErrorArea();
        
        String cnMess = "", vmMess = "", vyMess = "", verMess ="", hMess ="";
        boolean cnError, vmError, vyError, verError, hError;
        //Set cardType
        if(cardTypeComboBox.getSelectedItem().getClass().equals(String.class)) {
            String tmp = (String)cardTypeComboBox.getSelectedItem();
            creditCard.setCardType(tmp);
        }
        //Set cardNumber
        if(cardNumberTextField4.getText().length() != 4) {
            cnError = true;
            cnMess = "Du måste skriva in kortnummer med 16 siffror";
        } else {
            cnError = false;
            String cardNumber = cardNumberTextField1.getText() + 
                    cardNumberTextField2.getText() +
                    cardNumberTextField3.getText() +
                    cardNumberTextField4.getText();
            creditCard.setCardNumber(cardNumber);
        }
        //Set valid month
        if(validMonthCombo.getSelectedIndex() == 0) {
            vmError = true;
            vmMess = "Du måste välja giltlig månad";
        } else {
            vmError = false;
            creditCard.setValidMonth(validMonthCombo.getSelectedIndex());
        }
        //Set valid year
        if(validYearCombo.getSelectedIndex() == 0) {
            vyError = true;
            vyMess = "Du måste välja giltligt år";
        } else {
            vyError = false;
            int tmp = Integer.parseInt((validYearCombo.getSelectedItem().toString()));
            creditCard.setValidYear(tmp);
        }
        //Set vertification Code
        if(verificationTextField.getText().length() != 3){
            verError = true;
            verMess = "Du måste skriva cvc";
        } else {
            verError = false;
            int tmp = Integer.parseInt(verificationTextField.getText());
            creditCard.setVerificationCode(tmp);
        }
        //Set Holders name
        if(holdersTextField.getText().length() == 0) {
            hError = true;
            hMess = "Du måste skriva in namn på kontoinnehavare";
        } else {
            hError = false;
            creditCard.setHoldersName(holdersTextField.getText());
        }
        
        String errorMessages = "";
        if(cnError) {
            errorMessages += cnMess + "\n";
        }
        if(vmError) {
            errorMessages += vmMess + "\n";
        }
        if(vyError) {
            errorMessages += vyMess + "\n";
        }
        if(verError) {
            errorMessages += verMess + "\n";
        }
        if(hError) {
            errorMessages += hMess + "\n";
        }
        
        if(cnError || vmError || vyError || verError || hError) {
            errorArea.setText(errorMessages);
            return false;
        } else {
            return true;
        }
    }
    
    public void clearErrorArea() {
        errorArea.setText("");
    }

    public void insertUpdate(DocumentEvent de) {
        if(cardNumberTextField1.hasFocus()){
            if(cardNumberTextField1.getText().length()==4){
                cardNumberTextField2.requestFocus();
            }
        } else if(cardNumberTextField2.hasFocus()){
            if(cardNumberTextField2.getText().length()==4){
                cardNumberTextField3.requestFocus();
            }
        }else if(cardNumberTextField3.hasFocus()){
            if(cardNumberTextField3.getText().length()==4){
                cardNumberTextField4.requestFocus();
            }
        }
        
    }

    public void removeUpdate(DocumentEvent de) {
        if(cardNumberTextField4.hasFocus()){
            if(cardNumberTextField4.getText().length()==0){
                cardNumberTextField3.requestFocus();
            }
        } else if(cardNumberTextField3.hasFocus()){
            if(cardNumberTextField3.getText().length()==0){
                cardNumberTextField2.requestFocus();
            }
        }else if(cardNumberTextField2.hasFocus()){
            if(cardNumberTextField2.getText().length()==0){
                cardNumberTextField1.requestFocus();
            }
        }
    }

    public void changedUpdate(DocumentEvent de) {
    }


    public class PromptDocument extends DefaultStyledDocument {

        private static final long serialVersionUID = 1L;
        private int maxSize = 0;
        int size = 0;
        public PromptDocument(int size){
            this.maxSize=size;
        }

        @Override
        public void insertString(int i, String string, AttributeSet as) throws BadLocationException {
            char[] c = string.toCharArray();
            for(int a =0;a<c.length;a++){
                if(size>=maxSize){
                    super.insertString(i, "", as);
                }else if(Character.isDigit(c[a])){                    
                    super.insertString(i, c[a]+"", as);
                    size++;
                }
            }
            
        }

        @Override
        protected void removeUpdate(DefaultDocumentEvent dde) {
            super.removeUpdate(dde); 
            size -= dde.getLength();
        }
        
        

        
        
    }
    
}
